#!/usr/bin/env node
// Start and keep server

var debug = require('debug')('asint:server');
var http = require('http');
var https = require('https');
var cron = require('node-cron');
var fs = require('fs-extra');
var path = require('path');


var config = require('../server/config/config')();
var mixin = require('../server/config/mixin');

var app = require('../app');

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || config.host.port);
app.set('port', port);

/*var sslOptions = {
  key: fs.readFileSync(path.join(__dirname, '../certificate/project_asint.key')),
  cert: fs.readFileSync(path.join(__dirname, '../certificate/project_asint.crt'))
};*/

var httpsServer = https.createServer(app);
var SSLPORT = config.host.sslPort;

httpsServer.listen(SSLPORT, function(){
  console.log("HTTPS server started on port " + SSLPORT);
});
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

// Create HTTP server
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port, function(){
  console.log("HTTP server started on port " + port);
});
server.on('error', onError);
server.on('listening', onListening);

/* Periodic tasks
cron.schedule('*'/'' + config.default.timeout_checkGlobal + ' * * * * *', () => {
    console.log('\nUpdating active users');
    var url = config.host.path + '/users/location';
    var params = {};
    var data = {};
    mixin.axiosRequest('get', url, params, data);
});*/

setTimeout(function () {
    locationUpdate();
}, 300);

function locationUpdate() {
    setTimeout(function () {
        locationUpdate();
    }, 1000);
    console.log('\nUpdating active users');
    var url = config.host.path + '/users/location';
    var params = {};
    var data = {};
    mixin.axiosRequest('get', url, params, data);
};


// Normalize a port into a number, string, or false.
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
}


// Event listener for HTTP server "error" event.
function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
}

// Event listener for HTTP server "listening" event.
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
